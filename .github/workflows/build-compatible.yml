name: Build Android APK (Compatible)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK manually
      run: |
        # 设置Android SDK环境变量
        export ANDROID_HOME=/usr/local/lib/android/sdk
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        export PATH=$PATH:$ANDROID_HOME/platform-tools
        
        # 检查SDK是否已安装
        if [ -d "$ANDROID_HOME" ]; then
          echo "Android SDK found at $ANDROID_HOME"
          ls -la $ANDROID_HOME
        else
          echo "Installing Android SDK..."
          sudo mkdir -p $ANDROID_HOME
          cd /tmp
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip commandlinetools-linux-11076708_latest.zip
          sudo mv cmdline-tools $ANDROID_HOME/
          sudo mkdir -p $ANDROID_HOME/cmdline-tools/latest
          sudo mv $ANDROID_HOME/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/ 2>/dev/null || true
        fi
        
        # 接受许可证
        echo "Accepting Android SDK licenses..."
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # 安装必要的SDK组件
        echo "Installing SDK components..."
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0"

    - name: Debug project structure
      run: |
        echo "=== Environment ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        java -version
        echo "=== Project files ==="
        ls -la
        echo "=== Gradle configuration files ==="
        echo "--- build.gradle ---"
        cat build.gradle
        echo "--- settings.gradle ---"
        cat settings.gradle

    - name: Initialize Gradle Wrapper
      run: |
        # 确保gradle wrapper目录存在
        mkdir -p gradle/wrapper
        
        # 使用gradle 7.6初始化wrapper
        echo "Initializing Gradle wrapper with version 7.6..."
        gradle wrapper --gradle-version=7.6
        
        # 确保gradlew可执行
        chmod +x gradlew
        
        # 验证文件
        echo "=== Gradle wrapper files ==="
        ls -la gradle/wrapper/
        ls -la gradlew*

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build debug APK
      env:
        ANDROID_HOME: /usr/local/lib/android/sdk
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      run: |
        echo "Building APK..."
        ./gradlew clean assembleDebug --stacktrace

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: wechat-notification-interceptor-compatible
        path: app/build/outputs/apk/debug/app-debug.apk

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-compatible
        path: |
          **/*.log
          **/build/reports/
